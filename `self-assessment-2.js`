//Problem 1
function countInstancesOf(letter, sentence) {
  // YOUR CODE HERE
  //Str char, str sentence
  //return num of instances of char in str sentence
  //result num
  //assume setence is a str containing chars
  //letter is in fact a str character
  var result = 0;
  // interate over sentence
  for (var i = 0; i < sentence.length; i++){
    if (sentence[i] === letter){
      result++;
    }
  }
  return result;
}

//assertEquals
function assertEquals(actual, expected, testName){
  if (actual === expected){
    console.log('Passed');
  } else {
    console.log(`FAILED [${testName}] Expected "${expected}", but got "${actual}".`);
  }
}
// test case
var actual1 = countInstancesOf("i", "mississippi is the best river ever");
var expected1 = 6;
assertEquals(actual1, expected1, "should return 6");

//Problem 2

function titleCase(str) {
  // YOUR CODE HERE
  // input is str
  // output is also str
  //take for granted str will always be str
  //result str var
  var firstChar = str[0];
  var resultStr = firstChar.toUpperCase();
  //iterate over str input
  for (var i = 1; i < str.length; i++){
    if(str[i] === " "){
      var nextChar = str[i+1]
      resultStr += " " + nextChar.toUpperCase();
      i++;
    } else {
      var currentChar = str[i]
      resultStr += currentChar.toLowerCase();
    }
  }
  return resultStr;
}

//assertEquals
function assertEquals(actual, expected, testName){
  if (actual === expected){
    console.log('Passed');
  } else {
    console.log(`FAILED [${testName}] Expected "${expected}", but got "${actual}".`);
  }
}
//testcase
var actual2 = titleCase('teXt mEssAge');
var expected2 = "Text Message";
assertEquals(actual2, expected2, "should capitolize first letters in words");

//Problem 3
function getNameAndBirthday(obj){
  //result str var
  var result = "";
  //iterate over nested obj
  var firstName = obj.name.first;
  var lastName = obj.name.last;
  var month = obj.birthDay.month;
  var day = JSON.stringify(obj.birthDay.day);
  var year = JSON.stringify(obj.birthDay.year);
  result = firstName + " " + lastName + ": " + month + " " + day + ", " + year;
  return result;
  }


//assertEquals
function assertEquals(actual, expected, testName){
  if (actual === expected){
    console.log('Passed');
  } else {
    console.log(`FAILED [${testName}] Expected "${expected}", but got "${actual}".`);
  }
}

//test case
var person = {
  name: {
    first: "Richard",
    last: "Loeb"
  },
  birthDay: {
    month: "July",
    day: 12,
    year: 1957
  }
}
var actual3 = getNameAndBirthday(person);
var expected3 = "Richard Loeb: July 12, 1957";
assertEquals(actual3, expected3, "Should return name and birthdate from input object")

//Problem 4
function renderInfoNeatly(obj){
//result str var
  var result = "";
  var firstName = obj.name.first;
  var lastName = obj.name.last;
  var month = obj.birthDay.month;
  var day = JSON.stringify(obj.birthDay.day);
  var year = JSON.stringify(obj.birthDay.year);
  result = titleCase(firstName) + " " + titleCase(lastName) + ": " + titleCase(month) + " " + day + ", " + year;

  return result;
}


//test case
var anotherPerson = {
  name: {
    first: "kylA",
    last: "liVingSton"
  },
  birthDay: {
    month: "octobeR",
    day: 20,
    year: 1961
  }
}
var actual4 = renderInfoNeatly(anotherPerson);
var expected4 = "Kyla Livingston: October 20, 1961";
assertEquals(actual4, expected4, "Should return name and birthdate from input object");

//Problem 5
function getPeopleBornIn(arr, str){
  //result arr
  var resultArr = [];
  var convertedData = "";
  //iterate over arr and call getNameAndBirthday function on each person obj
  for (var i = 0; i < arr.length; i++){
    var currentPerson = arr[i];
    if (currentPerson.birthDay.month === "August")
    resultArr.push(getNameAndBirthday(arr[i]));
  }
  return resultArr;
}

//testCase
var staff = [
  {name: {first: "Alyssa", last: "Hacker"}, birthDay: {month: "June", day: 5, year: 1987}},
  {name: {first: "Ben", last: "Bitdiddle"}, birthDay: {month: "August", day: 19, year: 1984}},
  {name: {first: "Eva", last: "Ator"}, birthDay: {month: "March", day: 29, year: 1980}},
  {name: {first: "Lem", last: "Tweakit"}, birthDay: {month: "August", day: 11, year: 1989}},
  {name: {first: "Louis", last: "Reasoner"}, birthDay: {month: "November", day: 17, year: 1992}}
];

var actual5 = getPeopleBornIn(staff, "August");
var expected5 = ["Ben Bitdiddle: August 19, 1984", "Lem Tweakit: August 11, 1989"];
assertEquals(actual5, expected5, "Should return an array with people born in the specified month");
